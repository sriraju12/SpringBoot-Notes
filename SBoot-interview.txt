Jar/War:

          Jar file (Java Archieve):
                                    JAR files are primarily used to packaging and distribute java libraries,classes
                                    and resources.They are commonly used for standalone java applications,libraries
                                    and command-line tools.


         WAR file(Web Archieve):
                                 WAR file are specifically designed for packaging and deploying web application in java
                                 They contain all the components of a web application, including servlets,jsp files,
                                 HTML pages,js,css and configuration files.


The main differences are:


1.Structure:

              in JAR:
                      * JAR files are typically structures as a flat archive
                      
                      * meaning they contains a collection of java class files and resources organized within a directory structure.
                       
                      * They do not have a specific directory hierarchy for web-related components like web pages or servlets.

              in WAR:
                      * WAR files have a well defined directory structure that follows the java EE(Enterprise Edition) specifications.They
                        include directories like WEB_INF for configuration files(i.e web.xml)

                      * classes for compiled java classes, and lib for external libraries(JAR files)

                      * web content such as HTML, JSP, JS, and CSS files are typically places outside the WEB_INF directory.

2.Deployment:

             in JAR:
                     JAR files are generally used for standalone applications that are not meant for web deployment.
                     they are usually executed using the java -jar command or added to the classpath.

             in WAR:
                     WAR files are specifically designed for deployment in web application(i.e Apache Tomcat).they are
                     placed in the appropriate directory(usually  the webapps directory)of the web server, and the server
                     deploys and manages the web application.

3.Main Entry Point:
                 
                 in JAR:
                         JAR files may contain a Main-class attribute in their manifest file, specifying the class
                         that serves as the entry point when executing the JAR file.this is common for executable JAR's.

                 in WAR:
                         WAR files do not have a single main entry point like executable JAR's.they contain web components
                         (servlets,JSP's)that are invoked based on HTTP request received by the web server.


how to run project(deploy) using runnable JAR file:

                                            1. create the jar file of the application(mvn clean install -Dskip Tests)
                                            2. JAR file will be created in target folder.
                                            3. go to that path and open cmd 
                                            4. execute java -jar springBootApp.0.0.SNAPSHOT.jar(jar-name)
                                            5.then the project will be up and running.

How to deploy WAR file in tomcat:

                                  1.create the war file of the application(mvn clean install -Dskip Tests)
                                  2.WAR file will be created in target folder.
                                  3.download the tomcat, extract it and go inside the folder and click on confi folder and open the tomcat users
                                     in order to acess the tomcat we need to add the user in it.
                                  
                                  4.add <user username="root" password="root" roles="manager-gui,manager-script"/>
                                     (only for the 1st time we need to add the user) 
                                  5.To start the tomcat, you need to go to bin folder and double click on startup file then the tomcat will run.
                                  6.open the tomcat in browser(http://localhost:8080)
                                  7.go to Manager App and it will ask the username and password.
                                  8.search for WAR file to deploy and choose the file by selecting the war file and deploy.
                                  9.verify the url's.


Note:
      1.To create a jar file(zip file) -> jar -cvf sampleapp.jar test.class   // here c means create, v means verbose and f means named file 
      2.To extract the jar file(unzip file) -> jar -xvf sampleapp.jar         // here x means extract
      3.To see the table of conetent in jar file -> jar -tvf sampleapp.jar    // here it will display the names of the classes present in that file.






SpringBoot unit testing with JUnit and Mockito:
                                                  1.DataJpaTest annotation -> it is a class level annotation we will use it instead of SpringBootTest annotation
                                                                              because in DataJpaTest, it will disable full auto-configuration and instead applys
                                                                              only configuration relevant to JPA tests.


                                                  2.In order to write any test case, first you need to annotate with @Test then only it will consider as test case.
               
                                                  3.DisplayName annotation -> it is used to display the custom name for the test case.
     
                                                  4.assertNotNull method -> it will check whether the given object or value is not null.

                                                  5.Mock annotation -> it is used to create a mock object for a particular class.
                                                 
                                                  6.Injectmocks annotation -> it is used to inject the mock object into the class being tested.
                                                                              (it creates an instance of the object and inject the mocks to it)

                                                  7.when(movieRepository.save(movie)).thenReturn(movie) -> This means when movierepository calls the save method then it will return movie.
 
                                                  8.WebMvcTest annotation -> it is a class level annotation.it is used for spring MVC test that focuses only on spring MVC components.
                                                                             
                                                                              * Using this annotation will disable fill auto-configuration and instead apply only configuration relevant to MVC tests
                                                                                (@controller, @ControllerAdvice but not @component, @service, and @repository beans)
                                                 
                                                  9.ObjectMapper -> it is used to convert the object into string.
 
                                                  10.MockBean annotation -> it creates mock and inject into application context where as mock annotation only creates it.

Note:

      * To write any test case, three things are required,
                                                            1.Arrange -> Setting up the data that required for the test case
                                                            2.Act -> Calling a method that is being tested
                                                            3.Assert -> Verify that the expected result is correct or not.


Spring Security:

                  spring security typically covers:
                                                     1.Login and logout functionality.
                                                     2.Allow/block acess URLs to logged in users.
                                                     3.Allow/block access to URLs to logged in users And with certain roles.


5 core concepts in spring security:
                                    1.Authentication - Who is this user(ex userid,password)
                                    2.Authorization - Are they allowed to do this
                                    3.Principal - currently logged-in user
                                    4.Granted Authority - permission given to role. 
                                    5.Roles - role is like privilege to access for something.


how to add spring security to springboot project:

                                                   1.add the spring-boot-starter-security dependency.
                                                   2.it will automatically creates the login page to secure URLs.
                                                   3.By default it will create the user as user and generate the password in console.
                                                     using those credentials we can login into it.
                                                   4.we can override the default credentials by mentioning crendentials in application.properties files.

                                                             i.e spring.security.user.name=raju
                                                                 spring.security.user.password=raju
                                                 
                                                   5.the above is only for one user and it is basic and not provide full security.
                                                   6.we need configure the security (but this is temporarly stores credentials but not in database).
                                                  
                                                   7.

                                                      @EnableWebSecurity
                                                      public class SecurityConfiguration extends WebSecurityConfigurerAdapter {
	
	                                                         @Override
	                                                         protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		
		                                                              auth.inMemoryAuthentication()
		                                                                   .withUser("raju")
		                                                                   .password("raju")
		                                                                   .roles("USER")
		                                                                   .and()
		                                                                   .withUser("sandy")
		                                                                   .password("sandy")
		                                                                   .roles("ADMIN");
	
	                                                                    }
	
	                                                         @Bean
	                                                         public PasswordEncoder getPasswordEncoder() {
		                                                    return NoOpPasswordEncoder.getInstance();
	                                                           }
                                                                  }

authorization:
               logged in person can access only particular apis.

@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

	

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {

		auth.inMemoryAuthentication()
		    .withUser("raju")
		    .password("raju")
		    .roles("USER")
		    .and()
		    .withUser("sandy")
			.password("sandy")
			.roles("ADMIN");

	}

	@Bean
	public PasswordEncoder getPasswordEncoder() {
		return NoOpPasswordEncoder.getInstance();
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
		    .antMatchers("/persons/admin").hasRole("ADMIN")    //hasRole means only single person can access it.
		    .antMatchers("/persons/user").hasAnyRole("USER", "ADMIN")   //hasAnyRole means multiple can access it.
			.antMatchers("/persons/").permitAll()
			.and().formLogin();

	}

}


Note:
      permitted access roles should be Most restricted to least restricted.


JDBC Authentication:
                    JDBC authentication with default schema using h2 database.


@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

	@Autowired
	DataSource dataSource;

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.jdbcAuthentication()
		    .dataSource(dataSource)
		    .withDefaultSchema()
		    .withUser(
		    		User.withUsername("user")
		    		.password("user")
		    		.roles("USER")
		    		)
		    .withUser(
		    		User.withUsername("admin")
		    		.password("admin")
		    		.roles("ADMIN")
		    		);
	}
	
	@Bean
	public PasswordEncoder getPasswordEncoder() {
		return NoOpPasswordEncoder.getInstance();
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
		    .antMatchers("/persons/admin").hasRole("ADMIN")
		    .antMatchers("/persons/user").hasAnyRole("USER","ADMIN")
		    .antMatchers("/persons/").permitAll()
		    .and().formLogin();
	}
	
}


JDBC Authentication using mysql with user schema:

@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

	@Autowired
	DataSource dataSource;

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.jdbcAuthentication()
		    .dataSource(dataSource)
		    .withUser("user")
		    .password("user")
		    .roles("USER")
		    .and()
		    .withUser("admin")
		    .password("admin")
		    .roles("ADMIN");
	}
	
	@Bean
	public PasswordEncoder getPasswordEncoder() {
		return NoOpPasswordEncoder.getInstance();
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
		    .antMatchers("/persons/admin").hasRole("ADMIN")
		    .antMatchers("/persons/user").hasAnyRole("USER","ADMIN")
		    .antMatchers("/persons/").permitAll()
		    .and().formLogin();
	} 
}


Spring security with LDAP:
                           1.add the dependencies(spring-boot-starter-security, unboundedid-ldapsdk,spring-ldap-core,spring-security-ldap).
                           2.add the details of LDAP in application.properties file.
                           3.create the file under resouces(which is data about user information) in .ldif format.
                           4.create the security configuration file.
                           5.then test it.


Spring security with JWT:


	

Note:
       JWT is divided into 3 types: 1.header - in contains the type(jwt) and alogorithm(which is used to verify the signature).
                                    2.payload -it contains the user information.
                                    3.signature.(it will check whether given information is correct or not).



 
Microservices:
               1.@Bean -> it is like producer.it will create something and whenever someone ask for it will provide to them.
               2.@autowired -> it is like consumer and it will consume for the bean and uses in that class.

rest template -> it is blocking and synchronous that means it uses one thread per request for api.this means it will wait for a response after making request
                 to a remote server thus blocking the thread this whole time.

                 * Rest template is used to create applications that consume RESTful web services for all HTTP methods.

web client -> it is non-blocking and Asynchronous.


fault tolerance -> fault tolerance means given a microservice application, what is the impact when there is a fault,
                   will the whole application goes down or part of functionality goes down or there are some
                   arrangements to handle failure.

                   * Fault tolerance is the capacity to operate effectively even in the presence of faults.

Resilience -> resilience means how many faults the system can tolerate.

              * i would define resilience as the ability of software systems to recover from failure and continue
                operating without significant downtime.


    
                          movie                Movie
                          info        ------>  DB
           ----------->  service
           |
           |

       movie              rating
      catalog   ------>   data
      service             service

        ^
        |
        |-------------->   Discovery
                          server
                          (Eureka server)


How threads works in a web server:
                                   whenever the request comes in a web server, the web server creates the thread and 
                                   gives back reponse and then the thread will die.This how threads works in web server.

                                  * whenever the request comes in a web server, the web server create the thread and 
                                    it taking some time to process that request and again another request comes, the
                                    web server create the thread and this is also taking some time to process that request
                                    and so on for other request also.In this case,resources(tomcat for example) get consumed (the maximum no. of threads)
                                    and you can not do anything.
                                 

 

 issue with microservices:
                            1.service goes down(any microservice goes down) -> solution is create or run multiple instances of that microservices.

                            2.a microservice instance is slow -> solution is:
                                                                              1.by using the timeouts(it partially solves the problem) i.e using Rest template to make timeouts(removing the threads when they are taking too much time)

                                                                                 * while creating the rest template bean use this for making timeouts.
                                                                                     
                                                                                     @Bean
	                                                                             public RestTemplate getRestTemplate() {
		                                                                         HttpComponentsClientHttpRequestFactory clientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory();
		                                                                         clientHttpRequestFactory.setConnectTimeout(3000);
		                                                                      return new RestTemplate(clientHttpRequestFactory);

	                                                                              } // here if the thread takes more than 3 sec to give response back then that thread will get timeout(throw an error).

                                                                                  * whenever the request comes in web server for slow microservice and it taking time to process that request and we have set
                                                                                    the timeout of 3 sec and it can not process that request within that time.And evenually there are more request came within
                                                                                    that 3 sec time and that threads will not die, it will stay in the webserver and after some time due to more requests, the threads
                                                                                    will not die,it reaches the maximum no.of threads and the resources get consumed.

                                                                                  * if client calls the movieDB api which is an external api and movieDB is slow due that movie info service become slow.
                                                                                      which effects every other microservices also due to threads(all the microservices become slow).
        
                                                                                  * now come to microservices, whenever the request comes for the movieDB, the web server create the thread and
                                                                                    it is taking some time to process that and again another request comes for rating data service which will
                                                                                    very fast and process that request then thread will die.Again the new request comes for movieDB then it will
                                                                                    takes some time to process that request and so on for other requests also.After sometime the resources get
                                                                                    consumed(maximum no .of threads).so at this time a new request comes for rating data services usually response
                                                                                    is very fast but now the response will become slow due to it reached the maximum no.of threads that are waiting
                                                                                    and also the resources get consumed.So, it will effect the other microservices also.

                                                            
                                                                                                                               web server
                                                                                                                         ---------------------
                                                                                                         request       |                     |
                                                                                                    ---------------->  |    thread           |------->movieDb
                                                                                                       request         |                     |-------->rating data service
                                                                                                    ---------------->  |     thread          |-------->movieDb
                                                                                                         request       |        :            |         :
                                                                                                    ---------------->  |        :            |         :
                                                                                                                       |       thread        |--------->movieDB
                                                                                                                       |---------------------                    


                                                                            
                                                                              2.whenever we notice that some microservice is slow then let me not send requests to it for a bit and after a period of time let try again
                                                                                see whether its recover or not.if its still the same(slow) then stop sending requests to it.
                                                                                     
                                                                                  * This is the popular pattern in fault tolerance in microservices.
                                                                                
                                                                                      Circuit breaker patter(best solution):
                                                                                                                              * detect something is wrong.
                                                                                                                              * take remporary steps to avoid the situation getting worse.
                                                                                                                              * deactivate the problem component so that it does not affect downstream components.
                                                                                          * Circuit breaker basic function is to interrupt current flow after a fault is detected.

                                                                                          * circuit breaker parameters:  
                                                                                                                          when does the circuit trip: these are three parameters for circuit breaker

                                                                                                                                       # last n requests to consider for the decision.
                                                                
                                                                                                                                       # how many of those should fail -> let say 3 should fail out of 5.

                                                                                                                                       # timeout duration -> lets say 3 sec(mark it as failure when it takes more than 3 sec to process the request).

                                                                                                                          when does the circuit un-trip(back to normal):
                                                                                                                                                                          # how long after a circuit trip to try again -> let say 5 sec
                                                                                                                                                                            (after a failure, after how much time will try again to check whether it is sucess or failure).

                                                                                           * whenever you notice that microservice is slow and you need to stop calling that service.
                                                                                             but what to do when when i get a request for that microservice,in case answer is fallback.
                                                                                           * whenever the circuit breaks,then we need a fallback to handle that failure:
                                                                                                                                                                          # throw an error.
                                    
                                                                                                                                                                          # return a fallback default response (better approach) i.e hard coded values

                                                                                                                                                                          # save previous responses(cache) and use that when possible.(best approach)
                                                                                                                                                                            (whenever circuit breaks, the user request for the data and it is available in cache take the data
                                                                                                                                                                             from the cache and give response to user.The user will never know that the microservice is goes down).

                                                                                           * why circuit breakers:
                                                                                                                   # failing faster -> this means failing faster instead of failing after some time.
                                                                                                                   # fallback functionality -> whenever the circuit breaks, we can provide fallback(alternative implementation) to it.
                                                                                                                   # automatic recovery -> when the circuit breaks, it will check after some time,if it is okay then it recovers or else it fails.

                                                                                           * circuit breaker patter: when to break circuit | what to do when circuit breaks | when to resume requests.



Hystrix:
          1.open source library originally created by netflix.
          2.implements circuit breaker pattern so you don't have to write thread programming.
          3.give it the configuration parameters and it does the work.
          4.works well with springboot.


Adding Hystrix to a springboot microservice:
                                             1.Add the dependency spring-cloud-starter-netfilx-hysrix.
                                             2.Add @EnableCircuitBreaker to the application(main) class.
                                             3.Add @HystrixCommand to methods that need circuit breakers.(for this annotation add fallbackMethod = "getFallbackMethod" as value and this getFallbackMethod should has same method signature
                                                                                                           and to add the parameters to it use commandProperties = {
                                                                                                                                                                       @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value="2000"),
                                                                                                                                                                       @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold", value="5"),
                                                                                                                                                                       @HystrixProperty(name = "circuitBreaker.errorThresholdPercentage", value="50"),
                                                                                                                                                                       @HystrixProperty(name = "circuitBreaker.sleepWindowMilliseconds", value="5000")
                                                                                                                                                                        })
                                             4.configure Hystrix behaviour.


Hystrix Dashboard:
                   It will display all the data about circuit breakers.

                   1.add spring-cloud-starter-netfilx-hystrix-dashboard and spring-boot-starter-acuator dependencies.
                   2.add @EnbaleHystrixDashboard annotation in main class.
                   3.add management.endpoints.web.exposure.include=hystrix.stream in application.properties file.
                   4.open in browser application-url/hystrix.it will open hystrix dashboard.
               

                             

















